{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth'; //configurazione di firebase\n\nconst config = {\n  apiKey: \"AIzaSyAtvKVcqtgUjNSxSrp9yLOR4l_SC0irRPI\",\n  authDomain: \"crown-db-a331a.firebaseapp.com\",\n  projectId: \"crown-db-a331a\",\n  storageBucket: \"crown-db-a331a.appspot.com\",\n  messagingSenderId: \"43378748584\",\n  appId: \"1:43378748584:web:82704f9a566c97632aa69d\",\n  measurementId: \"G-DVQL4K9KCV\"\n};\nfirebase.initializeApp(config); //azione asincrona perchè stiamo facendo richiesta all'API\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`); // const collectionRef = firestore.collection('users');\n\n  const snapShot = await userRef.get(); // const collectionSnapshot = await collectionRef.get(); \n  // console.log({ collection: collectionSnapshot.docs.map(doc => doc.data()) });\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log('errore creazione utente', error.message);\n    }\n  }\n\n  return userRef;\n}; //definizione chiave di raccolta\n\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  //richiesta asincrona\n  const collectionRef = firestore.collection(collectionKey); // console.log(collectionRef);\n\n  const batch = firestore.batch(); //batch oggetto aggiunge userRef.set e li spara alla fine delle chiamate\n\n  objectsToAdd.forEach(obj => {\n    //loop sull'oggetto objectToAdd usando il metodo forEach\n    const newDocRef = collectionRef.doc(); //otteniamo il doc su una stringa vuota\n\n    batch.set(newDocRef, obj); //passa il riferimento del doc e il valore che vogliamo impostare\n  }); //otteniamo la registrazione di 5 ogg di riferimento del doc e ognuno ha il suo ID\n\n  return await batch.commit();\n}; //convertire la collezione in oggetto invece di un array\n\nexport const convertCollectionsSnapshotToMap = collections => {\n  const transformedCollection = collections.docs.map(doc => {\n    const {\n      title,\n      items\n    } = doc.data();\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  }); //funzione di riduzione per oggetto finale con 2° param oggetto vuoto\n\n  return transformedCollection.reduce((accumulator, collection) => {\n    //oggetto va nella 1° nuova collezione\n    accumulator[collection.title.toLowerCase()] = collection; //imposta il primo val uguale al titolo in minus\n\n    return accumulator;\n  }, {}); //passiamo oggetto iniziale\n};\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\n      unsubscribe();\n      resolve(userAuth);\n    }, reject);\n  });\n};\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore(); //accesso a provider per autenticazione a Google\n\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: 'select_account'\n}); //attivare sempre il popup di Google Auth\n\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\nexport default firebase;","map":{"version":3,"sources":["C:/Users/luigi.puzziferri/lp-clothing/client/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createAt","Date","set","error","console","log","message","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","collection","batch","forEach","obj","newDocRef","commit","convertCollectionsSnapshotToMap","collections","transformedCollection","docs","map","title","items","data","routeName","encodeURI","toLowerCase","id","reduce","accumulator","getCurrentUser","Promise","resolve","reject","unsubscribe","auth","onAuthStateChanged","googleProvider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\nimport 'firebase/auth';\r\n\r\n//configurazione di firebase\r\n\r\nconst config = {\r\n    apiKey: \"AIzaSyAtvKVcqtgUjNSxSrp9yLOR4l_SC0irRPI\",\r\n    authDomain: \"crown-db-a331a.firebaseapp.com\",\r\n    projectId: \"crown-db-a331a\",\r\n    storageBucket: \"crown-db-a331a.appspot.com\",\r\n    messagingSenderId: \"43378748584\",\r\n    appId: \"1:43378748584:web:82704f9a566c97632aa69d\",\r\n    measurementId: \"G-DVQL4K9KCV\"\r\n  };\r\n\r\n  firebase.initializeApp(config);\r\n\r\n  //azione asincrona perchè stiamo facendo richiesta all'API\r\n\r\n  export const createUserProfileDocument = async (userAuth, additionalData) => {\r\n    if (!userAuth) return;\r\n\r\n    const userRef = firestore.doc(`users/${userAuth.uid}`);\r\n\r\n    // const collectionRef = firestore.collection('users');\r\n\r\n    const snapShot = await userRef.get();\r\n\r\n    // const collectionSnapshot = await collectionRef.get(); \r\n    // console.log({ collection: collectionSnapshot.docs.map(doc => doc.data()) });\r\n\r\n    if(!snapShot.exists) {\r\n        const { displayName, email } = userAuth;\r\n        const createAt = new Date();\r\n\r\n        try {\r\n            await userRef.set({\r\n              displayName,\r\n              email,\r\n              createAt,\r\n              ...additionalData\r\n            })\r\n        } catch (error) {\r\n          console.log('errore creazione utente', error.message);\r\n        }\r\n    }\r\n\r\n    return userRef;\r\n  };\r\n  \r\n  //definizione chiave di raccolta\r\n\r\n  export const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {  //richiesta asincrona\r\n    const collectionRef = firestore.collection(collectionKey);\r\n    // console.log(collectionRef);\r\n\r\n    const batch = firestore.batch();  //batch oggetto aggiunge userRef.set e li spara alla fine delle chiamate\r\n    objectsToAdd.forEach(obj => {     //loop sull'oggetto objectToAdd usando il metodo forEach\r\n      const newDocRef = collectionRef.doc();  //otteniamo il doc su una stringa vuota\r\n      batch.set(newDocRef, obj);      //passa il riferimento del doc e il valore che vogliamo impostare\r\n    });\r\n    //otteniamo la registrazione di 5 ogg di riferimento del doc e ognuno ha il suo ID\r\n    return await batch.commit();\r\n  };\r\n\r\n  //convertire la collezione in oggetto invece di un array\r\n  export const convertCollectionsSnapshotToMap = (collections) => {\r\n    const transformedCollection = collections.docs.map((doc) => {\r\n      const { title, items } = doc.data();\r\n\r\n      return {\r\n        routeName: encodeURI(title.toLowerCase()),\r\n        id: doc.id,\r\n        title,\r\n        items\r\n      };\r\n    });\r\n    //funzione di riduzione per oggetto finale con 2° param oggetto vuoto\r\n    return transformedCollection.reduce((accumulator, collection) => {   //oggetto va nella 1° nuova collezione\r\n      accumulator[collection.title.toLowerCase()] = collection;   //imposta il primo val uguale al titolo in minus\r\n      return accumulator;\r\n    } , {});   //passiamo oggetto iniziale\r\n  };\r\n\r\n  export const getCurrentUser = () => {\r\n    return new Promise((resolve, reject) => {\r\n      const unsubscribe = auth.onAuthStateChanged(userAuth => {\r\n        unsubscribe();\r\n        resolve(userAuth);\r\n      }, reject);\r\n    });\r\n  };\r\n\r\n  export const auth = firebase.auth();\r\n  export const firestore = firebase.firestore();\r\n\r\n  //accesso a provider per autenticazione a Google\r\n\r\n  export const googleProvider = new firebase.auth.GoogleAuthProvider();\r\n  googleProvider.setCustomParameters({ prompt: 'select_account' }); //attivare sempre il popup di Google Auth\r\n  export const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\r\n\r\n  export default firebase;\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}